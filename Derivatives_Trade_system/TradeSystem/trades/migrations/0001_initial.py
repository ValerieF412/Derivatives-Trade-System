# Generated by Django 2.2.6 on 2020-03-06 14:50

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('companyID', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('companyName', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(max_length=3)),
                ('date', models.DateField()),
                ('valueInUSD', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('pdf', models.FileField(blank=True, upload_to='reports_pdf/')),
                ('csv', models.FileField(blank=True, upload_to='reports_csv/')),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(default='', max_length=30)),
                ('add_date', models.DateField(default=datetime.date.today)),
                ('buying_party', models.CharField(default='', max_length=40)),
                ('selling_party', models.CharField(default='', max_length=40)),
                ('notional_amount', models.FloatField(default=None)),
                ('notional_currency', models.CharField(default=None, max_length=3)),
                ('underlying_price', models.FloatField(default=1000, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('underlying_currency', models.CharField(default='', max_length=3)),
                ('strike_price', models.FloatField(default=100, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('quantity', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('maturity_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='StockPrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('stockPrice', models.FloatField()),
                ('companyID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trades.Company')),
            ],
        ),
        migrations.CreateModel(
            name='ProductsSold',
            fields=[
                ('product', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('companyID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trades.Company')),
            ],
        ),
        migrations.CreateModel(
            name='ProductPrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(max_length=30)),
                ('date', models.DateField()),
                ('marketPrice', models.FloatField()),
            ],
            options={
                'unique_together': {('product', 'date')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalTrade',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('product_name', models.CharField(default='', max_length=30)),
                ('add_date', models.DateField(default=datetime.date.today)),
                ('buying_party', models.CharField(default='', max_length=40)),
                ('selling_party', models.CharField(default='', max_length=40)),
                ('notional_amount', models.FloatField(default=None)),
                ('notional_currency', models.CharField(default=None, max_length=3)),
                ('underlying_price', models.FloatField(default=1000, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('underlying_currency', models.CharField(default='', max_length=3)),
                ('strike_price', models.FloatField(default=100, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('quantity', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('maturity_date', models.DateField(default=datetime.date.today)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical trade',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddConstraint(
            model_name='currency',
            constraint=models.UniqueConstraint(fields=('date', 'currency'), name='price_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='stockprices',
            unique_together={('date', 'companyID')},
        ),
    ]
